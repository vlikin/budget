"use strict";var app=angular.module("appModule",["LocalStorageModule","ngRoute"]),app=angular.module("appModule").constant("AUTH_EVENTS",{loginSuccess:"auth-login-success",loginFailed:"auth-login-failed",logoutSuccess:"auth-logout-success",sessionTimeout:"auth-session-timeout",notAuthenticated:"auth-not-authenticated",notAuthorized:"auth-not-authorized"}).constant("USER_ROLES",{all:"*",admin:"admin",editor:"editor",guest:"guest"});angular.module("appModule").controller("User-loginController",["$scope","$rootScope","AUTH_EVENTS","AuthService",function(e,t,o,n){console.log("init"),e.credentials={username:"login",password:"password"},e.message={text:"",type:""},e.login=function(s){n.login(s).then(function(n){t.$broadcast(o.loginSuccess),e.message.type=n.success?"success":"warning",e.message.text=n.message,console.log(e.message)},function(){t.$broadcast(o.loginFailed)})}}]).controller("Phone-ListCtrl",["$scope","$http",function(e,t){t.get("/static/app/phones/phones.json").success(function(t){e.phones=t}),e.orderProp="age"}]).controller("Phone-DetailCtrl",["$scope","$routeParams",function(e,t){e.phoneId=t.phoneId}]);var app=angular.module("appModule").factory("AuthService",["$http","Session","USER_ROLES",function(e,t,o){var n={};return n.login=function(n){return e.post("/user/rest/login",n).then(function(e){return e.data.success?(t.create(e.data.id,e.data.user.id,o.admin),e.data):e.data})},n.isAuthenticated=function(){return!!t.userId},n.isAuthorized=function(e){return angular.isArray(e)||(e=[e]),n.isAuthenticated()&&-1!==e.indexOf(t.userRole)},n}]),app=angular.module("appModule").config(["$routeProvider",function(e){e.when("/user/login",{templateUrl:"/static/app/partials/user-login.html",controller:"User-loginController"}).when("/phones",{templateUrl:"/static/app/partials/phone-list.html",controller:"Phone-ListCtrl"}).when("/phones/:phoneId",{templateUrl:"/static/app/partials/phone-detail.html",controller:"Phone-DetailCtrl"}).otherwise({redirectTo:"/phones"})}]);angular.module("appModule").service("Session",function(){return this.create=function(e,t,o){this.id=e,this.userId=t,this.userRole=o},this.destroy=function(){this.id=null,this.userId=null,this.userRole=null},this});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImNvbnN0YW50LmpzIiwiY29udHJvbGxlci5qcyIsImZhY3RvcnkuanMiLCJyb3V0ZS5qcyIsInNlcnZpY2UuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFFQSxJQUFBLEtBQUEsUUFBQSxPQUFBLGFBQ0EscUJBQ0EsWUNKQSxJQUFBLFFBQUEsT0FBQSxhQUNBLFNBQUEsZUFDQSxhQUFBLHFCQUNBLFlBQUEsb0JBQ0EsY0FBQSxzQkFDQSxlQUFBLHVCQUNBLGlCQUFBLHlCQUNBLGNBQUEsd0JBRUEsU0FBQSxjQUNBLElBQUEsSUFDQSxNQUFBLFFBQ0EsT0FBQSxTQUNBLE1BQUEsU0NiQSxTQUFBLE9BQUEsYUFFQSxXQUFBLHdCQUFBLFNBQUEsYUFBQSxjQUFBLGNBQUEsU0FBQSxFQUFBLEVBQUEsRUFBQSxHQUNBLFFBQUEsSUFBQSxRQUNBLEVBQUEsYUFDQSxTQUFBLFFBQ0EsU0FBQSxZQUdBLEVBQUEsU0FDQSxLQUFBLEdBQ0EsS0FBQSxJQUdBLEVBQUEsTUFBQSxTQUFBLEdBQ0EsRUFBQSxNQUFBLEdBQUEsS0FBQSxTQUFBLEdBQ0EsRUFBQSxXQUFBLEVBQUEsY0FFQSxFQUFBLFFBQUEsS0FEQSxFQUFBLFFBQ0EsVUFHQSxVQUVBLEVBQUEsUUFBQSxLQUFBLEVBQUEsUUFDQSxRQUFBLElBQUEsRUFBQSxVQUVBLFdBQ0EsRUFBQSxXQUFBLEVBQUEsbUJBS0EsV0FBQSxrQkFBQSxTQUFBLFFBQ0EsU0FBQSxFQUFBLEdBQ0EsRUFBQSxJQUFBLGtDQUFBLFFBQUEsU0FBQSxHQUNBLEVBQUEsT0FBQSxJQUdBLEVBQUEsVUFBQSxTQUdBLFdBQUEsb0JBQUEsU0FBQSxlQUNBLFNBQUEsRUFBQSxHQUNBLEVBQUEsUUFBQSxFQUFBLFVDM0NBLElBQUEsS0FBQSxRQUFBLE9BQUEsYUFFQSxRQUFBLGVBQUEsUUFBQSxVQUFBLGFBQUEsU0FBQSxFQUFBLEVBQUEsR0FDQSxHQUFBLEtBMkJBLE9BekJBLEdBQUEsTUFBQSxTQUFBLEdBQ0EsTUFBQSxHQUNBLEtBQUEsbUJBQUEsR0FDQSxLQUFBLFNBQUEsR0FDQSxNQUFBLEdBQUEsS0FBQSxTQUNBLEVBQUEsT0FBQSxFQUFBLEtBQUEsR0FBQSxFQUFBLEtBQUEsS0FBQSxHQUFBLEVBQUEsT0FDQSxFQUFBLE1BR0EsRUFBQSxRQUlBLEVBQUEsZ0JBQUEsV0FDQSxRQUFBLEVBQUEsUUFHQSxFQUFBLGFBQUEsU0FBQSxHQUlBLE1BSEEsU0FBQSxRQUFBLEtBQ0EsR0FBQSxJQUVBLEVBQUEsbUJBQ0EsS0FBQSxFQUFBLFFBQUEsRUFBQSxXQUdBLEtDOUJBLElBQUEsUUFBQSxPQUFBLGFBRUEsUUFBQSxpQkFDQSxTQUFBLEdBQ0EsRUFDQSxLQUFBLGVBQ0EsWUFBQSx1Q0FDQSxXQUFBLHlCQUVBLEtBQUEsV0FDQSxZQUFBLHVDQUNBLFdBQUEsbUJBRUEsS0FBQSxvQkFDQSxZQUFBLHlDQUNBLFdBQUEscUJBRUEsV0FDQSxXQUFBLGNDbEJBLFNBQUEsT0FBQSxhQUVBLFFBQUEsVUFBQSxXQVdBLE1BVkEsTUFBQSxPQUFBLFNBQUEsRUFBQSxFQUFBLEdBQ0EsS0FBQSxHQUFBLEVBQ0EsS0FBQSxPQUFBLEVBQ0EsS0FBQSxTQUFBLEdBRUEsS0FBQSxRQUFBLFdBQ0EsS0FBQSxHQUFBLEtBQ0EsS0FBQSxPQUFBLEtBQ0EsS0FBQSxTQUFBLE1BRUEiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYXBwID0gYW5ndWxhci5tb2R1bGUoJ2FwcE1vZHVsZScsIFtcbiAgJ0xvY2FsU3RvcmFnZU1vZHVsZScsXG4gICduZ1JvdXRlJyxcbl0pOyIsInZhciBhcHAgPSBhbmd1bGFyLm1vZHVsZSgnYXBwTW9kdWxlJylcbi5jb25zdGFudCgnQVVUSF9FVkVOVFMnLCB7XG4gIGxvZ2luU3VjY2VzczogJ2F1dGgtbG9naW4tc3VjY2VzcycsXG4gIGxvZ2luRmFpbGVkOiAnYXV0aC1sb2dpbi1mYWlsZWQnLFxuICBsb2dvdXRTdWNjZXNzOiAnYXV0aC1sb2dvdXQtc3VjY2VzcycsXG4gIHNlc3Npb25UaW1lb3V0OiAnYXV0aC1zZXNzaW9uLXRpbWVvdXQnLFxuICBub3RBdXRoZW50aWNhdGVkOiAnYXV0aC1ub3QtYXV0aGVudGljYXRlZCcsXG4gIG5vdEF1dGhvcml6ZWQ6ICdhdXRoLW5vdC1hdXRob3JpemVkJ1xufSlcbi5jb25zdGFudCgnVVNFUl9ST0xFUycsIHtcbiAgYWxsOiAnKicsXG4gIGFkbWluOiAnYWRtaW4nLFxuICBlZGl0b3I6ICdlZGl0b3InLFxuICBndWVzdDogJ2d1ZXN0J1xufSk7IiwiYW5ndWxhci5tb2R1bGUoJ2FwcE1vZHVsZScpXG5cbi5jb250cm9sbGVyKCdVc2VyLWxvZ2luQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRyb290U2NvcGUnLCAnQVVUSF9FVkVOVFMnLCAnQXV0aFNlcnZpY2UnLCBmdW5jdGlvbiAoJHNjb3BlLCAkcm9vdFNjb3BlLCBBVVRIX0VWRU5UUywgQXV0aFNlcnZpY2UpIHtcbiAgY29uc29sZS5sb2coJ2luaXQnKTtcbiAgJHNjb3BlLmNyZWRlbnRpYWxzID0ge1xuICAgIHVzZXJuYW1lOiAnbG9naW4nLFxuICAgIHBhc3N3b3JkOiAncGFzc3dvcmQnXG4gIH07XG5cbiAgJHNjb3BlLm1lc3NhZ2UgPSB7XG4gICAgdGV4dDonJyxcbiAgICB0eXBlOicnXG4gIH07XG5cbiAgJHNjb3BlLmxvZ2luID0gZnVuY3Rpb24gKGNyZWRlbnRpYWxzKSB7XG4gICAgQXV0aFNlcnZpY2UubG9naW4oY3JlZGVudGlhbHMpLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdChBVVRIX0VWRU5UUy5sb2dpblN1Y2Nlc3MpO1xuICAgICAgaWYgKGRhdGEuc3VjY2Vzcykge1xuICAgICAgICAkc2NvcGUubWVzc2FnZS50eXBlID0gJ3N1Y2Nlc3MnO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgICRzY29wZS5tZXNzYWdlLnR5cGUgPSAnd2FybmluZyc7XG4gICAgICB9XG4gICAgICAkc2NvcGUubWVzc2FnZS50ZXh0ID0gZGF0YS5tZXNzYWdlO1xuICAgICAgY29uc29sZS5sb2coJHNjb3BlLm1lc3NhZ2UpO1xuICAgICAgLy8kc2NvcGUuc2V0Q3VycmVudFVzZXIodXNlcik7XG4gICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KEFVVEhfRVZFTlRTLmxvZ2luRmFpbGVkKTtcbiAgICB9KTtcbiAgfTtcbn1dKVxuXG4uY29udHJvbGxlcignUGhvbmUtTGlzdEN0cmwnLCBbJyRzY29wZScsICckaHR0cCcsXG4gIGZ1bmN0aW9uICgkc2NvcGUsICRodHRwKSB7XG4gICAgJGh0dHAuZ2V0KCcvc3RhdGljL2FwcC9waG9uZXMvcGhvbmVzLmpzb24nKS5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICRzY29wZS5waG9uZXMgPSBkYXRhO1xuICAgIH0pO1xuXG4gICAgJHNjb3BlLm9yZGVyUHJvcCA9ICdhZ2UnO1xuICB9XSlcblxuLmNvbnRyb2xsZXIoJ1Bob25lLURldGFpbEN0cmwnLCBbJyRzY29wZScsICckcm91dGVQYXJhbXMnLFxuICBmdW5jdGlvbigkc2NvcGUsICRyb3V0ZVBhcmFtcykge1xuICAgICRzY29wZS5waG9uZUlkID0gJHJvdXRlUGFyYW1zLnBob25lSWQ7XG4gIH1dKTtcblxuIiwidmFyIGFwcCA9IGFuZ3VsYXIubW9kdWxlKCdhcHBNb2R1bGUnKVxuXG4uZmFjdG9yeSgnQXV0aFNlcnZpY2UnLCBmdW5jdGlvbiAoJGh0dHAsIFNlc3Npb24sIFVTRVJfUk9MRVMpIHtcbiAgdmFyIGF1dGhTZXJ2aWNlID0ge307XG4gXG4gIGF1dGhTZXJ2aWNlLmxvZ2luID0gZnVuY3Rpb24gKGNyZWRlbnRpYWxzKSB7XG4gICAgcmV0dXJuICRodHRwXG4gICAgICAucG9zdCgnL3VzZXIvcmVzdC9sb2dpbicsIGNyZWRlbnRpYWxzKVxuICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlcykge1xuICAgICAgICBpZiAocmVzLmRhdGEuc3VjY2Vzcykge1xuICAgICAgICAgIFNlc3Npb24uY3JlYXRlKHJlcy5kYXRhLmlkLCByZXMuZGF0YS51c2VyLmlkLCBVU0VSX1JPTEVTLmFkbWluKTtcbiAgICAgICAgICByZXR1cm4gcmVzLmRhdGE7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzLmRhdGE7XG4gICAgICB9KTtcbiAgfTtcbiBcbiAgYXV0aFNlcnZpY2UuaXNBdXRoZW50aWNhdGVkID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAhIVNlc3Npb24udXNlcklkO1xuICB9O1xuIFxuICBhdXRoU2VydmljZS5pc0F1dGhvcml6ZWQgPSBmdW5jdGlvbiAoYXV0aG9yaXplZFJvbGVzKSB7XG4gICAgaWYgKCFhbmd1bGFyLmlzQXJyYXkoYXV0aG9yaXplZFJvbGVzKSkge1xuICAgICAgYXV0aG9yaXplZFJvbGVzID0gW2F1dGhvcml6ZWRSb2xlc107XG4gICAgfVxuICAgIHJldHVybiAoYXV0aFNlcnZpY2UuaXNBdXRoZW50aWNhdGVkKCkgJiZcbiAgICAgIGF1dGhvcml6ZWRSb2xlcy5pbmRleE9mKFNlc3Npb24udXNlclJvbGUpICE9PSAtMSk7XG4gIH07XG4gXG4gIHJldHVybiBhdXRoU2VydmljZTtcbn0pOyIsInZhciBhcHAgPSBhbmd1bGFyLm1vZHVsZSgnYXBwTW9kdWxlJylcblxuLmNvbmZpZyhbJyRyb3V0ZVByb3ZpZGVyJyxcbiAgZnVuY3Rpb24oJHJvdXRlUHJvdmlkZXIpIHtcbiAgICAkcm91dGVQcm92aWRlci5cbiAgICAgIHdoZW4oJy91c2VyL2xvZ2luJywge1xuICAgICAgICB0ZW1wbGF0ZVVybDogJy9zdGF0aWMvYXBwL3BhcnRpYWxzL3VzZXItbG9naW4uaHRtbCcsXG4gICAgICAgIGNvbnRyb2xsZXI6ICdVc2VyLWxvZ2luQ29udHJvbGxlcidcbiAgICAgIH0pLlxuICAgICAgd2hlbignL3Bob25lcycsIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6ICcvc3RhdGljL2FwcC9wYXJ0aWFscy9waG9uZS1saXN0Lmh0bWwnLFxuICAgICAgICBjb250cm9sbGVyOiAnUGhvbmUtTGlzdEN0cmwnXG4gICAgICB9KS5cbiAgICAgIHdoZW4oJy9waG9uZXMvOnBob25lSWQnLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiAnL3N0YXRpYy9hcHAvcGFydGlhbHMvcGhvbmUtZGV0YWlsLmh0bWwnLFxuICAgICAgICBjb250cm9sbGVyOiAnUGhvbmUtRGV0YWlsQ3RybCdcbiAgICAgIH0pLlxuICAgICAgb3RoZXJ3aXNlKHtcbiAgICAgICAgcmVkaXJlY3RUbzogJy9waG9uZXMnXG4gICAgICB9KTtcbiAgfVxuXSk7IiwiYW5ndWxhci5tb2R1bGUoJ2FwcE1vZHVsZScpXG5cbi5zZXJ2aWNlKCdTZXNzaW9uJywgZnVuY3Rpb24gKCkge1xuICB0aGlzLmNyZWF0ZSA9IGZ1bmN0aW9uIChzZXNzaW9uSWQsIHVzZXJJZCwgdXNlclJvbGUpIHtcbiAgICB0aGlzLmlkID0gc2Vzc2lvbklkO1xuICAgIHRoaXMudXNlcklkID0gdXNlcklkO1xuICAgIHRoaXMudXNlclJvbGUgPSB1c2VyUm9sZTtcbiAgfTtcbiAgdGhpcy5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuaWQgPSBudWxsO1xuICAgIHRoaXMudXNlcklkID0gbnVsbDtcbiAgICB0aGlzLnVzZXJSb2xlID0gbnVsbDtcbiAgfTtcbiAgcmV0dXJuIHRoaXM7XG59KTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=