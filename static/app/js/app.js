"use strict";var app=angular.module("appModule",["LocalStorageModule","ngRoute","phoneControllers"]);app.config(["$routeProvider",function(e){e.when("/user/login",{templateUrl:"/static/app/partials/user-login.html",controller:"User-loginController"}).when("/phones",{templateUrl:"/static/app/partials/phone-list.html",controller:"Phone-ListCtrl"}).when("/phones/:phoneId",{templateUrl:"/static/app/partials/phone-detail.html",controller:"Phone-DetailCtrl"}).otherwise({redirectTo:"/phones"})}]),app.constant("AUTH_EVENTS",{loginSuccess:"auth-login-success",loginFailed:"auth-login-failed",logoutSuccess:"auth-logout-success",sessionTimeout:"auth-session-timeout",notAuthenticated:"auth-not-authenticated",notAuthorized:"auth-not-authorized"}),app.constant("USER_ROLES",{all:"*",admin:"admin",editor:"editor",guest:"guest"}),app.service("Session",function(){return this.create=function(e,t,o){this.id=e,this.userId=t,this.userRole=o},this.destroy=function(){this.id=null,this.userId=null,this.userRole=null},this}),app.factory("AuthService",["$http","Session","USER_ROLES",function(e,t,o){var n={};return n.login=function(n){return e.post("/user/rest/login",n).then(function(e){return console.log(e.data),e.data.success?(t.create(e.data.id,e.data.user.id,o.admin),e.data.user):!1})},n.isAuthenticated=function(){return!!t.userId},n.isAuthorized=function(e){return angular.isArray(e)||(e=[e]),n.isAuthenticated()&&-1!==e.indexOf(t.userRole)},n}]),app.factory("authService",["$http","$q","localStorageService",function(e,t,o){var n="http://ngauthenticationapi.azurewebsites.net/",r={},s={isAuth:!1,userName:""},a=function(t){return u(),e.post(n+"api/account/register",t).then(function(e){return e})},i=function(r){console.log("_login");var a="grant_type=password&username="+r.userName+"&password="+r.password,i=t.defer();return e.post(n+"token",a,{headers:{"Content-Type":"application/x-www-form-urlencoded"}}).success(function(e){o.set("authorizationData",{token:e.access_token,userName:r.userName}),s.isAuth=!0,s.userName=r.userName,console.log(e),i.resolve(e)}).error(function(){s.isAuth=!0,s.userName=r.userName,i.resolve({a:"s"}),console.log("error")}),i.promise},u=function(){o.remove("authorizationData"),s.isAuth=!1,s.userName=""},l=function(){var e=o.get("authorizationData");e&&(s.isAuth=!0,s.userName=e.userName)};return r.saveRegistration=a,r.login=i,r.logOut=u,r.fillAuthData=l,r.authentication=s,r}]),app.factory("authInterceptorService",["$q","$location","localStorageService",function(e,t,o){var n={},r=function(e){e.headers=e.headers||{};var t=o.get("authorizationData");return t&&(e.headers.Authorization="Bearer "+t.token),e},s=function(o){return 401===o.status&&t.path("/login"),e.reject(o)};return n.request=r,n.responseError=s,n}]),app.config(["$httpProvider",function(e){e.interceptors.push("authInterceptorService")}]);var phoneControllers=angular.module("phoneControllers",[]);phoneControllers.constant("AUTH_EVENTS",{loginSuccess:"auth-login-success",loginFailed:"auth-login-failed",logoutSuccess:"auth-logout-success",sessionTimeout:"auth-session-timeout",notAuthenticated:"auth-not-authenticated",notAuthorized:"auth-not-authorized"}),phoneControllers.controller("User-SignupController_",["$scope","USER_ROLES","AuthService",function(e,t,o){e.currentUser=null,e.userRoles=t,e.isAuthorized=o.isAuthorized,e.setCurrentUser=function(t){e.currentUser=t}}]),phoneControllers.controller("User-loginController",["$scope","$rootScope","AUTH_EVENTS","AuthService",function(e,t,o,n){console.log("init"),e.credentials={username:"login",password:"password"},e.login=function(r){n.login(r).then(function(n){t.$broadcast(o.loginSuccess),e.setCurrentUser(n)},function(){t.$broadcast(o.loginFailed)})}}]),phoneControllers.controller("Phone-ListCtrl",["$scope","$http",function(e,t){t.get("/static/app/phones/phones.json").success(function(t){e.phones=t}),e.orderProp="age"}]),phoneControllers.controller("Phone-DetailCtrl",["$scope","$routeParams",function(e,t){e.phoneId=t.phoneId}]);
//# sourceMappingURL=data:application/json;base64,